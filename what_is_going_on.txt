so here's the thing

the main program takes a board, generates new boards (with associated data)
and then stores the boards in the database.

The database can be queried to see if a board is alrewady there, and it's on disk and stuff so we can use
a database of boards to generate the next generation of boards and eventually end up with a DAG that has all possible
board states in it, which is a pretty good result.

Since there is a database of board states for every generation we can run things independantly. This makes testing and tweaking easier.

When we actually have these databases we can also do a pruning step to arrive at (yet another) database of moves that play the perfect game. If there are mutliple branches in boardspace that lead to a win for white (which we'll assume is there since the game is solved) we can prune the branch with the largest amount of moves. All cool.

Now let's discuss the database.
Here we store a board. The way this happens is to create a unique key from the board state (encode as a board63) and store that in our on-disk binary+ tree. The associated data we store in another file.

The bpt is nice and balanced and makes searches easy (and fast, since we do billions of these this is important). The data is stored in a table file where we keep winlines around etc.


=== Generating random boards ===

Gen	Boards
0	1
1	7
2	49
3	343
4	2,401
5	16,807
6	117,649
7	823,536
8	5,673,234
9	39,394,572

This includes duplicates and was just writing stuff to file. Generation 9 was 995 MB

=== Generating boards without dupes ===

Gen	Boards
0		1
1		7
2		49
3		296
4		1,539
5		6,261
6		25,362
7		84,530

Let's see if we can get the number for gen 3 by thinking about it.


Gen 2 has 49 boards, that we split in 7 groups, we split on the location of the X pieces.
We imagine the 3rd move has been made
Group0 (2 O's somewhere):

--+---+---+---+---+---+---+---+
0 | X |   |   |   |   |   |   |
--+---+---+---+---+---+---+---+
  | 0 | 1 | 2 | 3 | 4 | 5 | 6 |

Case 1:
--+---+---+---+---+---+---+---+
1 | O |   |   |   |   |   |   |
--+---+---+---+---+---+---+---+
0 | X |   |   |   |   |   |   |
--+---+---+---+---+---+---+---+
  | 0 | 1 | 2 | 3 | 4 | 5 | 6 |
There are 6 possible places for the 2nd O, and all are unique boards
(O on O on X in col is not a legal board)
Cases:
1: 6
2: ?
3: ?
4: ?

Case 2:
--+---+---+---+---+---+---+---+
1 | X |   |   |   |   |   |   |
--+---+---+---+---+---+---+---+
0 | O |   |   |   |   |   |   |
--+---+---+---+---+---+---+---+
  | 0 | 1 | 2 | 3 | 4 | 5 | 6 |
There are 7 possible places for the 2nd O, and all are unique boards

Cases:
1: 6
2: 7
3: ?
4: ?

Now consider all the cases where 2 O's end up stacked, and are not on top of the X (covered by Case 1):
Case 3 (example):
--+---+---+---+---+---+---+---+
1 |   |   | O |   |   |   |   |
--+---+---+---+---+---+---+---+
0 | X |   | O |   |   |   |   |
--+---+---+---+---+---+---+---+
  | 0 | 1 | 2 | 3 | 4 | 5 | 6 |
There are 6 possible ways to do this

Cases:
1: 6
2: 7
3: 6
4: ?

Now the remaining ones are:
Case 4 (everything on the bottom line):

--+---+---+---+---+---+---+---+
0 | X | O | O |   |   |   |   |
--+---+---+---+---+---+---+---+
  | 0 | 1 | 2 | 3 | 4 | 5 | 6 |

O-on-1 * 5
O-on-2 * 4 (O can't be on 1 since we already have that one)
O-on-3 * 3
O-on-4 * 2
O-on-5 * 1
Total: 15

Cases:
1: 6
2: 7
3: 6
4: 15
 = 34
 
34*7 = 238 unique boards

So the bug was the fact that finding the correct node sometimes hits the path where a key in the keys array is equal to the to-be-inserted key and then instead of going to the node on the right (since that stores all keys >= target) we would go left.

Now actually generating boards without dupes:

Generation	#boards		wins W	wins B	CPU time(s)	filesize
0				1 (empty)
1				7
2				49
3				238
4				1,120
5				4,263
6				16,422
7				54,859		1,288					0.268797
8				184,275					2,932		1.267520
9				558,186		29,054				4.737817
10				1,662,623				61,878	15.142775
11				4,568,683	376,035				44.748782	118MB
12				12,236,101				763,718	5616.266429	315MB



It's too bad I don't have good timings from before using the node cache, but to illustrate, generating move 11 took 553 CPU seconds without the node cache and 44 CPU seconds with the cache.














